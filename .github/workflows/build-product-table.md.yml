name: Build product table (Markdown)

on:
  workflow_dispatch: {}   # ручной запуск из Actions

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate product_table.md
        shell: bash
        run: |
          python3 - <<'PY'
          import os, re, csv, urllib.parse, subprocess

          exts = {'.png', '.jpg', '.jpeg', '.webp', '.gif'}
          owner, repo = os.environ['GITHUB_REPOSITORY'].split('/')
          base_pages = f"https://{owner.lower()}.github.io/{repo.lower()}"

          # === Маппинги названий (опционально) ===
          # products_map.csv: product_code,product_name
          # colors_map.csv:   color_code,color_name
          def load_map(fname):
            d = {}
            if os.path.exists(fname):
              with open(fname, 'r', encoding='utf-8') as f:
                rdr = csv.reader(f)
                header = next(rdr, None)
                for row in rdr:
                  if not row or len(row) < 2: 
                    continue
                  key = (row[0] or '').strip()
                  val = (row[1] or '').strip()
                  if key:
                    d[key] = val
            return d

          products_map = load_map('products_map.csv')
          colors_map   = load_map('colors_map.csv')

          # === Парсер имени файла ===
          vol_token = re.compile(r'^\d+(?:[.,]\d+)?$')
          def norm_volume(tok):
            t = tok.replace(',', '.')
            if t == '22': t = '2.2'
            if re.fullmatch(r'0\\d{2}', t):  # 075 -> 0.75
              t = '0.' + t[1:]
            return t

          def parse_filename(name_noext):
            toks = [t for t in name_noext.split('_') if t]
            volume = ''
            color  = ''
            product_tokens = toks[:]

            vol_i = None
            for i, t in enumerate(toks):
              if vol_token.fullmatch(t):
                vol_i = i
                volume = norm_volume(t)
                break

            if vol_i is None:
              if toks:
                color = toks[-1]
                product_tokens = toks[:-1]
            else:
              if vol_i < len(toks)-1:
                color = toks[-1]
                product_tokens = toks[:vol_i]
              else:
                if vol_i >= 1:
                  color = toks[vol_i-1]
                  product_tokens = toks[:vol_i-1]
                else:
                  product_tokens = []

            product = '_'.join(product_tokens)
            return product, color, volume

          # === Собираем банки (packshots) ===
          packs = {}   # (product,color) -> {'0.75': url, '2.2': url, ...}
          for root, dirs, files in os.walk('.'):
            if root.startswith('./.git') or root.startswith('./.github'):
              continue
            for f in files:
              ext = os.path.splitext(f)[1].lower()
              if ext not in exts:
                continue
              rel = os.path.relpath(os.path.join(root, f), '.').replace(os.sep, '/')
              url = base_pages + '/' + urllib.parse.quote(rel, safe="/._-~")
              name_noext = os.path.splitext(os.path.basename(f))[0]

              product, color, volume = parse_filename(name_noext)
              if not product or not color:
                continue

              d = packs.setdefault((product, color), {})
              if volume:
                d[volume] = url

          # === Формируем строки таблицы ===
          def md_escape(s: str) -> str:
            return (s or '').replace('|', '\\|')

          rows = []
          seen_keys = sorted(packs.keys(), key=lambda k: (k[0], k[1]))
          for product, color in seen_keys:
            pmap = packs.get((product, color), {})
            pack_075 = pmap.get('0.75', '')
            if not pack_075:
              for cand in pmap:
                if cand.startswith('0.75'):
                  pack_075 = pmap[cand]; break
            pack_22  = pmap.get('2.2', '')
            if not pack_22:
              for cand in pmap:
                if cand.startswith('2.2'):
                  pack_22 = pmap[cand]; break

            object_1 = pack_075 or pack_22  # банка с цветом
            object_2 = ''                   # оставляем пустым
            video    = ''                   # оставляем пустым

            product_name = products_map.get(product, product.replace('_',' ').title())
            color_name   = colors_map.get(color, color)

            rows.append({
              'product_code': product,
              'product_name': product_name,
              'color_code': color,
              'color_name': color_name,
              'pack_0_75': pack_075,
              'pack_2_2': pack_22,
              'object_1': object_1,
              'object_2': object_2,
              'video': video
            })

          # === Пишем Markdown-таблицу ===
          header = ["product_code","product_name","color_code","color_name","pack_0_75","pack_2_2","object_1","object_2","video"]
          out = []
          out.append("| " + " | ".join(header) + " |")
          out.append("|" + "|".join("-"* (len(h)+2) for h in header) + "|")

          for r in rows:
            out.append("| " + " | ".join([
              md_escape(r['product_code']),
              md_escape(r['product_name']),
              md_escape(r['color_code']),
              md_escape(r['color_name']),
              r['pack_0_75'],
              r['pack_2_2'],
              r['object_1'],
              r['object_2'],
              r['video']
            ]) + " |")

          with open('product_table.md','w',encoding='utf-8') as fw:
            fw.write("\n".join(out) + "\n")

          subprocess.check_call(['git','config','user.name','github-actions'])
          subprocess.check_call(['git','config','user.email','github-actions@github.com'])
          subprocess.check_call(['git','add','product_table.md'])
          subprocess.check_call(['git','commit','-m','data: build product_table.md (plus video column)'])
          PY

      - name: Push changes
        run: git push || true
